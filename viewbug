#!/bin/bash

# viewbug.sh - CLI for reading Debian bug reports
# Copyright (C) 2013-2014 Jens Oliver John <asterisk@2ion.de>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

readonly G_VERSION=4
readonly G_FILEKEY=$$
readonly G_TMPDIR=$(mktemp -d)

F_CMD='mutt -f $FILE'
F_OUT_NAME="$G_TMPDIR/\$BUGNO-$G_FILEKEY.mbox"
F_OUT_COMBINE=0

declare -a NLIST
declare -a PLIST
declare -a XARGV

log () {
  printf "[%b%s%b] %s\n" '\033[1;31m' "$1" '\033[0m' "$2"
}

help () {
    echo '
    viewbugs.sh - Copyright (C) 2013-2014 Jens Oliver John
    This program comes with ABSOLUTELY NO WARRANTY. This is free
    software, and you are welcome to redistribute it under certain
    conditions. Refer to the LICENSE file in the distribution for
    details.

    viewbugs.sh is a CLI for reading Debian bug reports.

    Usage:

        viewbugs.sh [OPTIONS] <BUGLIST>

        <BUGLIST> is a list of instances of the two options

            -n BUG#
            -p PKG[/version]

        which refer to a bug by number or to all bugs of a package
        respectively. BUG# has to be an integer. PKG is a package
        name, optionally refering to a specific package version.
        
        If the argument to either option is equal to '@', we take
        the bug#/package name from the X11 primary selection instead.

    Options:

        -A ARG
            Add an extra argument ARG when calling apt-listbugs.
            May be specified multiple times.
            Refer to apt-listbugs(1) for more information.

        -c
            Combine all retrieved bug reports into a single MBOX file.

        -h   
            Print this short synopsis.

        -s SEVERITY
            Shorthand for -A'-s SEVERITY'
      
        -v  
            Print the version.

        -x COMMAND
            Use COMMAND as the MBOX reader. $FILE in COMMAND will
            be replaced with the path of the file to be displayed.
            Defaults to "mutt -f $FILE".'
}

cleanup () {
  echo -n "Removing temporary files ($G_TMPDIR) ... "
  rm -rf $G_TMPDIR &>/dev/null && echo OK || echo "FAILED"
}

from_clipboard () {
  local buf
  if [[ $1 = @ ]] ; then
    buf=$(xclip -o)
    if (( $? != 0 )) ; then
      log "$0" "Clipboard is empty, using the actual argument instead"
      echo "$1"
      return
    fi
    echo "$buf"
    return
  fi
  echo "$1"
}


trap cleanup EXIT
trap cleanup SIGTERM

while getopts ":A:cx:vhn:p:s:" OPT; do
    case $OPT in
        A)  XARGV=(${XARGV[@]} "$OPTARG") ;;
        c)  F_OUT_COMBINE=1 ;;
        h)  help; exit 0 ;;
        n)  NLIST=(${NLIST[@]} "$(from_clipboard "$OPTARG")") ;;
        p)  PLIST=(${PLIST[@]} "$(from_clipboard "$OPTARG")") ;;
        s)  XARGV=(${XARGV[@]} "-s $OPTARG") ;;
        v)  log "$0" "Script version: $G_VERSION"; exit 0; ;;
        x)  if type "$(echo "$OPTARG" | cut -d' ' -f1)" &>/dev/null; then
                F_CMD=$OPTARG
            else
                log "$0" "Error: $OPTARG is not in \$PATH." 1>&2
                exit 1
            fi
            ;;
    esac
done

if [[ ${#NLIST[@]} -eq 0 && ${#PLIST[@]} -eq 0 ]]; then
    log "$0" "No packages or bug#s specified. Specify -h for usage information."
    exit 0
fi

# retrieve mbox files

for n in ${NLIST[@]}; do
    BUGNO=$n
    OUTFILE=$(eval echo $F_OUT_NAME)
    wget -q -O "$OUTFILE" "http://bugs.debian.org/cgi-bin/bugreport.cgi?mbox=yes;bug=$n"
    if (( $? != 0 )) ; then
      log "#$n" "Could not retrieve mailbox, skipping."
      continue
    fi
    if [[ ! -s $OUTFILE ]]; then
        log "#$n" "Mailbox is empty, nothing to read."
        rm -f "$OUTFILE"
    fi
done

for p in ${PLIST[@]}; do
    BUGLIST=$(apt-listbugs -q ${XARGV[@]} list "$p" | grep -o '#[[:digit:]]\+' | tr -d '#')
    if [[ -z $BUGLIST ]]; then
        echo "No bugs for package $p with current apt-listbugs parameters."
    else
        for n in $BUGLIST; do
            BUGNO=$n
            OUTFILE=$(eval echo $F_OUT_NAME)
            wget -q -O "$OUTFILE" "http://bugs.debian.org/cgi-bin/bugreport.cgi?mbox=yes;bug=$n"
            if (( $? != 0 )) ; then
              log "$p#$n" "Could not retrieve mailbox, skipping."
              continue
            fi
            if [[ ! -s $OUTFILE ]]; then
                log "$p#$n" "Mailbox is empty, nothing to read."
                rm $OUTFILE
            fi
        done
    fi
done

# display mbox files

if [[ $F_OUT_COMBINE = 1 ]]; then
    CAB=$(mktemp)
    cat $G_TMPDIR/* > $CAB
    if ! FILE=$CAB eval $F_CMD; then
        echo "Error: failed to execute $F_CMD on $CAB."
    fi
else
  for mbox in $G_TMPDIR/* ; do
        if ! FILE=$mbox eval $F_CMD; then
            echo "Error failed to execute $F_CMD on $mbox:"
        fi
    done
fi
